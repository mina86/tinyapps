#!/bin/sh
##
## Truncates pwd to specified number of characters
## Copyright (c) 2005-2009 by Michal Nazareicz (mina86/AT/mina86.com)
##
## This software is OSI Certified Open Source Software.
## OSI Certified is a certification mark of the Open Source Initiative.
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.
##
## This is part of Tiny Applications Collection
##   -> http://tinyapps.sourceforge.net/
##


case "$1" in
--function)  ## Generic function
	echo 'tpwd () {
	__tpwd_exit_code=$?
	if [ X"$1" != X-n ] || [ X"${2#-}" != X"$2" ] || [ $# -gt 5 ] || [ -z "$HOME" ]; then
		"$(which tpwd)" "$@"
		return $__tpwd_exit_code
	fi

	# tpwd -n [ <len> [ <trunc> [ <tlen> [ <path> ]
	set -- "${2:-30}" "${3-...}" "$4" "${5:-$PWD}"
	# tpwd <len> <trunc> <tlen> <path>
	case "$4" in
	"$HOME") set -- "$1" "$2" "$3" "~" ;;
	"$HOME"/*) set -- "$1" "$2" "$3" "~${4#$HOME}"
	esac

	if [ ${#4} -le "$1" ] || [ ${3:-${#2}} -gt "$1" ]; then
		printf %s "$4"
		return $__tpwd_exit_code
	fi

	printf %s "$2"
	set -- "$(( $1 - ${3:-${#2}} ))" "${4#?}"
	while [ ${#2} -gt "$1" ]; do
		set -- "$1" "${2#?}"
	done
	printf %s "$2"
	return $__tpwd_exit_code
}'
	exit
	;;
--bash|--zsh) ## Bash/zsh function
	echo 'tpwd () {
	local exitcode=$? pwd="$PWD" echo=echo args=( $@ )
	if [ X"$1" = X-P ] || [ X"$1" = X-L ]; then
		pwd="$(pwd $1)"
		shift
	fi
	if [ X"$1" = X-n ]; then
		echo="echo -n"
		shift
	fi
	if [ $# -gt 4 ] || [ x"${1#-}" != x"$1" ] || [ -z "$HOME" ]; then
		"$(which tpwd)" "${args[@]}"
		return $?
	fi

	pwd="${4-$pwd}";
	case $pwd in
	"$HOME") pwd="~" ;;
	"$HOME"/*) pwd="~/${pwd#$HOME/}"
	esac

	set -- "${1:-30}" "${2-...}" "$3"
	set -- "$1" "$2" "${3:-${#2}}"
	if [ ${#pwd} -le "$1" ] || [ "$3" -gt "$1" ]; then
		$echo "$pwd"
	else
		$echo "$2${pwd:$(( ${#pwd} - $1 + $3 ))}"
	fi

	return $exitcode
}'
	exit
esac


## PWD
if [ X"$1" = X-P ] || [ X"$1" = X-L ]; then
	pwd="$(pwd $1)"
	shift
else
	pwd="$PWD"
fi

## New line
if [ X"$1" = X-n ]; then
	echo='printf %s'
	shift
else
	echo=echo
fi

## Usage
if [ $# -gt 4 ] || [ X"${1#-}" != X"$1" ]; then
	cat <<EOF
usage: tpwd [ -L | -P ] [ -n ] [<len> [<trunc> [<tlen> [<path>]]]]
       eval "\$(tpwd --bash)"      defines bash function
       eval "\$(tpwd --zsh)"       defines zsh function
       eval "\$(tpwd --function)"  defines generic POSIX shell function
 -L       uses  'pwd -L'  instead of  \$PWD
 -P       uses  'pwd -P'  instead of  \$PWD
 -n       doesn't print new line character at the end
 <len>    maximum length of printed string                       [30]
 <trunc>  string to print at the beginning if pwd was trunced   [...]
 <tlen>   length of <trunc> (useful if using ANSI codes)
 <path>   path to use instead of \$PWD

It might be used in PS1 varaible to truncate very long PWD's which
normaly would took a whole line (or more), eg:
    PS1='[\\u@\\h \$(tpwd -n 30 {)]\\$ '     # works in bash

EOF
	[ X"$1" = X"--help" ] || [ X"$1" = X"-h" ]
	exit $?
fi

## PWD
pwd="${4-$pwd}";
case $pwd in //*)
	pwd="${pwd#/}"
esac

home="${HOME:-$(eval echo ~$(id -un))}"
home="${home%/}"
if [ -n "$home" ]; then
	case "$pwd" in
	"$home") pwd='~';;
	"$home"/*) pwd="~/${pwd#$home/}"
	esac
fi

## Short enough or trunc too long
len=${1-30}
if [ ${#pwd} -le $len ]; then
	$echo "$pwd"
	exit
fi

trunc=${2-...}
len=$(( $len - ${3-${#trunc}} ))
if [ $len -le 0 ]; then
	$echo "$trunc"
	exit
fi

## Print
if [ -n "$BASH_VERSION$ZSH_VERSION" ]; then
	$echo "$trunc${pwd:$(( ${#pwd} - $len ))}"
else
	while [ ${#pwd} -gt $len ]; do
		pwd="${pwd%?}"
	done
	$echo "$trunc$pwd"
fi
